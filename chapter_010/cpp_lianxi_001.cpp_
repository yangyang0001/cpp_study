//
// Created by 杨建伟 on 2021/3/30.
//

# include <iostream>
# include <climits>
# include <string>
# include <cstring>
# include <vector>
# include <array>
# include <ctime>
# include <cctype>
# include <cmath>
# include <fstream>

using namespace std;

int main() {
    cout.setf(ios_base::fixed, ios_base::floatfield);

    // 1、什么是类?
    /**
     * 答: OOP 思想的一种产物, 这种东西内部包含私有数据成员, 公有方法成员, 可抽象为一种类型, 这种东西就叫类
     * 引申:
     * 基础思维: 阐述一件 东西 的单位正交基
     * a、它是什么? b、它的基本特征和结构是什么? c、它的作用是什么? d、它是如何完成功能的, 以及如何实现这种东西
     */

    // 2、类如何实现抽象, 封装 和 隐藏数据的?
    /**
     * 答: 通过数据和方法来实现抽象, 所谓抽象就是某一类型的归类表示, OOP思想就抽象思想的一种实现思想表示
     *    隐藏的提现: 访问控制符和 共有方法访问
     *    封装的体现: 调用的时候只关注方法, 不关注具体实现细节
     */

    // 3、对象和类的关系
    /**
     * 答: 类是某种抽象表现形式, 对象是某种类的实例, 更抽象: 类是某种特征表示, 对象是 特征表示的实体
     */

    // 4、类数据成员 和 类函数成员的区别是 什么?
    /**
     * 答: 二者不可比较, 都是类的不可或缺的组成部分, 否则就完成不了类的定义 和 创建同类型的实例!
     */

    // 5、构造函数何时被调用, 析构函数呢?
    /**
     * 构造函数被调用的时机:
     *      初始化的时候就调用 构造函数
     *
     * 析构函数调用时机: 一句话: 当对象过期时, 就会触发析构函数调用
     *      自动存储变量: 在代码块执行完成后 自动触发
     *      静态存储变量: 在程序执行完成后   自动触发
     *      动态存储变量: delete时 立即触发
     *      临时内存变量: 使用完成立即回收   立刻触发
     */


    return 0;
}


