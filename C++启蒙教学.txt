------------------------------------------------ 第2章 C++运行实例学习 ------------------------------------------------
<< >> 插入运算符

认识std库中的  cin, cout

学习类的相关知识: 类之于对象 就像 类型之于变量。类是一种数据结构, 对象就是某种结构下的实体

------------------------------------------------ 第3章 基本数据类型 ------------------------------------------------
climits 作为常量引用的库, 这里面定义了很多常量, 可在程序中直接引用, 在文件头引入 #include <climits> 就可以了
sizeof 的使用

#设置打印float和double类型的 小数点的个数
cout.setf(ios_base::fixed, ios_base::floatfield) // fixed-point


------------------------------------------------ 第4章 组合数据类型 ------------------------------------------------
数组:
    定义格式: type arrayName[arraySize] 的定义格式, 内容存放的数据 可用 = {} 了来定义, 但是数组没有提供直接查询数组长度的方法, 可以用 sizeof(array) / sizeof(array[0])

结构体:
    struct structName { ... }; 推荐使用

共用体:
    union unionName { ... }; 不推荐使用, 在内存字段不为稀缺资源的今天并不推荐使用

指针:
    & 取地址符号; 地址和具体的值是 一个硬币的两面

new 和 delete:
    new 用来分配内存, delete回收内存, new 分配的内存在 (heap) 中或 自由存储空间(free store) 中
    用 new 来创建数组格式: type * pointName = new type[arraySize];
    注意: 当使用完 new 开辟完 heap 内存或 free store 内存后, 必须要用 delete 释放内存, 对于数组来说要用 delete[] 来释放

指针算术:
    指针算术和普通的的运算概念有很大的区别, 指针算术 是针对 每个元素的占用字节进行 移动的! 数组名也是不能够进行加减的因为那是固定的常量, 只能是新的指针变量才能进行指针算术

动态编联和静态编联:
    静态编联 是针对 直接定义数组的编译方式, 在编译期就直接定义好的数据的长度!
    动态编联 是针对 new, new[] 运行时开辟内存的! 需要用 delete 或 delete[] 释放内存!

四种存储方式:
    自动存储, 静态存储, 动态存储, 线程存储

vector 存储在 heap区或free store区, 数组和 array 存放在 stack 区中

vector 定义变量的格式:
vector<typeName> name(ele_num)

------------------------------------------------ 第5章 循环和关系表达式 ------------------------------------------------
打印格式的修改:
    cout.setf(ios_base::boolalpha); 将逻辑表达式表示为 true 或 false

逻辑运算符对string的用法:
    string类型支持 ==、!= 等逻辑运算, 并且实现了值比较

clock:
    clock() 函数的使用, CLOCKS_PER_SEC 每秒系统时间, clock_t 是一种时间类型 这种类型

    // 认识 clock() 函数
    clock_t delay = 10 * 1000;
    clock_t start = clock();
    while(clock() - start < delay) {
    }
    cout << "done" << endl;

    系统时间单位: 提供了一个常量 ctime 中的 CLOCKS_PER_SEC

定义别名, 使用typedef格式如下:
    typedef typeName aliasName

&地址符的灵活应用:
    double scores[5] = {60.0, 70.0, 80.0, 90.0, 100.0};
    for(double &x : scores){
        x = x * 0.80;
    }

cin 的用法和区别:
    char ch;
    cin >> ch; // 会忽略 空格符、换行符、tab符
    cin.get(ch); 或 ch = cin.get(); 不会省略 空格符、换行符、tab符


------------------------------------------------ 第6章 分支语句和逻辑运算符 ------------------------------------------------
# include <cctype> 具体内部函数的使用, 有个图片可以参考

三目运算符 ? :

switch case 的使用

cin 的使用:
    cin.get(char) cin.getline(char[], arraySize);

IO流模块_文件流 忽略学习 只了解!

cin.get()或 cin.get(ch) 有cin缓冲区 cin.clear() 清除缓存的必要性！

---------------------------------------------------------- 第7章 函数 ----------------------------------------------------
C++函数 函数的返回值不能是数组, 这只规定!

函数内部的参数 包括形参, 都称之为局部变量, 也叫自动变量!

存在一级间接关系的 非const 指针或地址 可以 赋值给const指针变量, 禁止使用 多重指针和单重指针的这种赋值操作, 否则编译报错!

string对象就像 处理基本数据类型是一样的, 这里提出了string对象的概念!

---------------------------------------------------------- 第8章 函数探幽 -------------------------------------------------
内联函数: 耗费更多的内存,节省普通函数调用
    格式举例: inline void functionanme(arguments) {...};

引用变量: 指的是给另外一个变量起一个别名, 但这种是地址相同, 大大简化 C中指针的用法, 某个变量的引用! 引用变量用于 结构体和类
    举例: int aa; int & other = aa;

应用变量对于继承的使用, 举例: ofstream ifstream ostream 的使用

默认参数: 必须从右开始,类似于java中的多个参数占用同一位置的简写方式

函数重载的重要特征就是参数列表, 这种特征又称为函数特征标或函数签名(function signature), 对于函数重载 函数特征标对于 类型变量和类型引用, 编译器视为一种情况!

函数泛型或函数模板的使用格式如下: 就和平时定义函数的方式一样, 只是在头部加上一个 template<typename T> 或 template<class T>, 未来使用 typename 关键字


